{ parameter
    (or (or (or (or %assets_admin
                   (or (address %change_tokens_administrator) (address %confirm_tokens_administrator))
                   (list %pause_tokens (pair (bool %paused) (bytes %token))))
                (or %contract_admin
                   (or (bool %pause_contract) (address %set_administrator))
                   (address %set_signer)))
            (or (or %governance
                   (or (address %set_fees_contract) (address %set_governance))
                   (or (nat %set_unwrapping_fees) (nat %set_wrapping_fees)))
                (or %signer
                   (pair %add_token (bytes %eth_contract) (pair %token_address address nat))
                   (pair %mint_token
                      (pair (nat %amount) (pair %event_id (bytes %block_hash) (nat %log_index)))
                      (pair (address %owner) (bytes %token_id))))))
        (pair %unwrap
           (pair (nat %amount) (bytes %destination))
           (pair (nat %fees) (bytes %token_id)))) ;
  storage
    (pair (pair (pair %admin (pair (address %administrator) (bool %paused)) (address %signer))
                (pair %assets
                   (big_map %mints (pair (bytes %block_hash) (nat %log_index)) unit)
                   (map %tokens bytes (pair address nat))))
          (pair (pair %governance
                   (pair (address %contract) (address %fees_contract))
                   (pair (nat %unwrapping_fees) (nat %wrapping_fees)))
                (big_map %metadata string bytes))) ;
  code { LAMBDA
           (pair (pair address bool) address)
           unit
           { SENDER ;
             SWAP ;
             CAR ;
             CAR ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "NOT_ADMIN" ; FAILWITH } { PUSH unit Unit } } ;
         LAMBDA
           (pair bytes (map bytes (pair address nat)))
           (pair address nat)
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             GET ;
             IF_NONE { PUSH string "Unknown token." ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract
              (or (or (list (pair address (pair nat nat))) (pair nat (map string bytes)))
                  (list (pair address (pair nat nat)))))
           { CONTRACT %tokens
               (or (or (list %burn_tokens (pair (address %owner) (pair (nat %token_id) (nat %amount))))
                       (pair %create_token (nat %token_id) (map %extras string bytes)))
                   (list %mint_tokens (pair (address %owner) (pair (nat %token_id) (nat %amount))))) ;
             IF_NONE { PUSH string "Token contract is not compatible." ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract (or (or unit (list (pair nat bool))) address))
           { CONTRACT %admin
               (or (or (unit %confirm_admin) (list %pause (pair (nat %token_id) (bool %paused))))
                   (address %set_admin)) ;
             IF_NONE { PUSH string "Token contract is not compatible." ; FAILWITH } {} } ;
         LAMBDA
           (pair (pair address bool) address)
           unit
           { CAR ;
             CDR ;
             IF { PUSH string "CONTRACT_PAUSED" ; FAILWITH } { PUSH unit Unit } } ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         CDR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         GT ;
         IF { PUSH string "FORBIDDEN_XTZ" ; FAILWITH } {} ;
         DIG 6 ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 DIG 3 ;
                 DROP ;
                 IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     IF_LEFT
                       { DIG 4 ;
                         DROP ;
                         IF_LEFT
                           { PAIR ;
                             DUP ;
                             CDR ;
                             EMPTY_SET address ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             CDR ;
                             ITER { CDR ; CAR ; PUSH bool True ; SWAP ; UPDATE } ;
                             NIL operation ;
                             SWAP ;
                             ITER { SWAP ;
                                    PAIR ;
                                    DUP ;
                                    CDR ;
                                    DIG 5 ;
                                    DUP ;
                                    DUG 6 ;
                                    SWAP ;
                                    EXEC ;
                                    SWAP ;
                                    CAR ;
                                    SWAP ;
                                    PUSH mutez 0 ;
                                    DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    CAR ;
                                    RIGHT (or unit (list (pair nat bool))) ;
                                    TRANSFER_TOKENS ;
                                    CONS } ;
                             DIG 2 ;
                             DROP ;
                             DIG 3 ;
                             DROP ;
                             PAIR }
                           { PAIR ;
                             DUP ;
                             CAR ;
                             DIG 3 ;
                             SWAP ;
                             EXEC ;
                             SWAP ;
                             CDR ;
                             NIL operation ;
                             DIG 2 ;
                             PUSH mutez 0 ;
                             PUSH unit Unit ;
                             LEFT (list (pair nat bool)) ;
                             LEFT address ;
                             TRANSFER_TOKENS ;
                             CONS ;
                             PAIR } }
                       { MAP { SWAP ;
                               DUP ;
                               DUG 2 ;
                               CDR ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               CDR ;
                               PAIR ;
                               DIG 5 ;
                               DUP ;
                               DUG 6 ;
                               SWAP ;
                               EXEC ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DIG 5 ;
                               DUP ;
                               DUG 6 ;
                               SWAP ;
                               EXEC ;
                               PUSH mutez 0 ;
                               NIL (pair nat bool) ;
                               DIG 4 ;
                               CAR ;
                               DIG 4 ;
                               PAIR ;
                               CONS ;
                               RIGHT unit ;
                               LEFT address ;
                               TRANSFER_TOKENS } ;
                         DIG 3 ;
                         DROP ;
                         DIG 3 ;
                         DROP ;
                         PAIR } ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 2 ;
                     DIG 3 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR }
                   { DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     IF_LEFT
                       { IF_LEFT
                           { SWAP ;
                             PAIR ;
                             DUP ;
                             CAR ;
                             DUP ;
                             CDR ;
                             DIG 2 ;
                             CDR ;
                             DIG 2 ;
                             CAR ;
                             CAR ;
                             PAIR ;
                             PAIR ;
                             NIL operation ;
                             PAIR }
                           { SWAP ;
                             PAIR ;
                             DUP ;
                             CAR ;
                             DUP ;
                             CDR ;
                             SWAP ;
                             CAR ;
                             CDR ;
                             DIG 2 ;
                             CDR ;
                             PAIR ;
                             PAIR ;
                             NIL operation ;
                             PAIR } }
                       { SWAP ; CAR ; PAIR ; NIL operation ; PAIR } ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 3 ;
                     CAR ;
                     CDR ;
                     DIG 3 ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR } }
               { DIG 6 ;
                 DROP ;
                 IF_LEFT
                   { DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     SENDER ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "NOT_GOVERNANCE" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     SWAP ;
                     IF_LEFT
                       { IF_LEFT
                           { PAIR ;
                             DUP ;
                             CDR ;
                             DUP ;
                             CDR ;
                             DIG 2 ;
                             CAR ;
                             DIG 2 ;
                             CAR ;
                             CAR ;
                             PAIR ;
                             PAIR ;
                             NIL operation ;
                             PAIR }
                           { PAIR ;
                             DUP ;
                             CDR ;
                             DUP ;
                             CDR ;
                             SWAP ;
                             CAR ;
                             CDR ;
                             DIG 2 ;
                             CAR ;
                             PAIR ;
                             PAIR ;
                             NIL operation ;
                             PAIR } }
                       { IF_LEFT
                           { PAIR ;
                             DUP ;
                             CDR ;
                             DUP ;
                             CDR ;
                             CDR ;
                             DIG 2 ;
                             CAR ;
                             PAIR ;
                             SWAP ;
                             CAR ;
                             PAIR ;
                             NIL operation ;
                             PAIR }
                           { SWAP ;
                             DUP ;
                             DUG 2 ;
                             CDR ;
                             CAR ;
                             PAIR ;
                             SWAP ;
                             CAR ;
                             PAIR ;
                             NIL operation ;
                             PAIR } } ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     CDR ;
                     DIG 2 ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     PAIR }
                   { SENDER ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "NOT_SIGNER" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     CAR ;
                     DIG 2 ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     IF_LEFT
                       { DIG 2 ;
                         DROP ;
                         DIG 5 ;
                         DROP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CAR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CAR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         DUP ;
                         CDR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CDR ;
                         SOME ;
                         DIG 3 ;
                         CAR ;
                         UPDATE ;
                         SWAP ;
                         CAR ;
                         PAIR ;
                         NIL operation ;
                         PAIR }
                       { DIG 4 ;
                         DROP ;
                         SWAP ;
                         DIG 2 ;
                         CAR ;
                         CDR ;
                         DIG 2 ;
                         PAIR ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CDR ;
                         DIG 2 ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         CAR ;
                         CDR ;
                         GET ;
                         IF_NONE {} { DROP ; PUSH string "TX_ALREADY_MINTED" ; FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CDR ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         PUSH nat 10000 ;
                         DIG 2 ;
                         CDR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         MUL ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         DUP ;
                         DIG 2 ;
                         SUB ;
                         ISNAT ;
                         IF_NONE { PUSH string "BAD_FEES" ; FAILWITH } {} ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CDR ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         CDR ;
                         CDR ;
                         PAIR ;
                         DIG 8 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DIG 8 ;
                         SWAP ;
                         EXEC ;
                         DUG 2 ;
                         DUP ;
                         DUG 3 ;
                         PAIR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         CDR ;
                         CAR ;
                         PAIR ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         CDR ;
                         DIG 5 ;
                         CAR ;
                         UNIT ;
                         DIG 8 ;
                         CAR ;
                         CDR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         PAIR ;
                         NIL operation ;
                         DIG 3 ;
                         PUSH mutez 0 ;
                         PUSH nat 0 ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         COMPARE ;
                         GT ;
                         IF { NIL (pair address (pair nat nat)) ;
                              DIG 7 ;
                              DIG 7 ;
                              PAIR ;
                              DIG 7 ;
                              CAR ;
                              CDR ;
                              PAIR ;
                              CONS ;
                              DIG 5 ;
                              CONS }
                            { DIG 5 ;
                              DROP ;
                              DIG 5 ;
                              DROP ;
                              DIG 5 ;
                              DROP ;
                              NIL (pair address (pair nat nat)) ;
                              DIG 5 ;
                              CONS } ;
                         RIGHT (or (list (pair address (pair nat nat))) (pair nat (map string bytes))) ;
                         TRANSFER_TOKENS ;
                         CONS ;
                         PAIR } ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 2 ;
                     DIG 3 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR } } }
           { DIG 3 ;
             DROP ;
             DIG 5 ;
             DROP ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DROP ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             CAR ;
             DIG 2 ;
             PAIR ;
             PAIR ;
             DUP ;
             CAR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             DIG 2 ;
             CDR ;
             DUP ;
             CDR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             CDR ;
             PAIR ;
             DIG 6 ;
             SWAP ;
             EXEC ;
             DUP ;
             CDR ;
             SWAP ;
             CAR ;
             DIG 6 ;
             SWAP ;
             EXEC ;
             PUSH nat 10000 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             CDR ;
             CAR ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             CAR ;
             CAR ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             PUSH nat 1 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LT ;
             IF { PUSH string "AMOUNT_TOO_SMALL" ; FAILWITH } {} ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             CDR ;
             CAR ;
             COMPARE ;
             LT ;
             IF { PUSH string "FEES_TOO_LOW" ; FAILWITH } {} ;
             DUP ;
             PUSH mutez 0 ;
             NIL (pair address (pair nat nat)) ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             CDR ;
             CAR ;
             DIG 8 ;
             DUP ;
             DUG 9 ;
             CAR ;
             CAR ;
             ADD ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             PAIR ;
             SENDER ;
             PAIR ;
             CONS ;
             LEFT (pair nat (map string bytes)) ;
             LEFT (list (pair address (pair nat nat))) ;
             TRANSFER_TOKENS ;
             SWAP ;
             PUSH mutez 0 ;
             NIL (pair address (pair nat nat)) ;
             DIG 7 ;
             CDR ;
             CAR ;
             DIG 5 ;
             PAIR ;
             DIG 6 ;
             CAR ;
             CDR ;
             PAIR ;
             CONS ;
             RIGHT (or (list (pair address (pair nat nat))) (pair nat (map string bytes))) ;
             TRANSFER_TOKENS ;
             DIG 2 ;
             NIL operation ;
             DIG 2 ;
             CONS ;
             DIG 2 ;
             CONS ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             DIG 2 ;
             DIG 3 ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR } } }

